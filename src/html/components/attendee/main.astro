---
const { message = "" } = Astro.props;
---

<attendee-func data-message={message}>
  <button
    type="button"
    data-id={JSON.parse(message).id}
    class="btn btn-outline-info"
    data-bs-toggle="modal"
    data-bs-target="#attendeeModal">View</button
  >

  <div
    class="modal fade"
    id="attendeeModal"
    tabindex="-1"
    aria-labelledby="attendeeModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="attendeeModalLabel">Attendee Details</h1>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form class="needs-validation" novalidate>
            <input type="hidden" id="eventId" value={JSON.parse(message).id} />
            <div class="card-body p-0">
              <table class="table table-striped" id="attendeeTable">
                <thead>
                  <tr>
                    <th class="col-1">#</th>
                    <th class="col-2">Name</th>
                    <th class="col-2">Email</th>
                    <th class="col-1">Contact</th>
                    <th class="col-1">Status</th>
                    <th class="col-2">Created At</th>
                    <th class="col-2">Updated At</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Dynamic rows will be populated here -->
                </tbody>
              </table>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal">Close</button>
            </div>
          </form>                
        </div>
      </div>
    </div>
  </div>
</attendee-func>

<script>
  class Attendeefunction extends HTMLElement {
    connectedCallback() {
      // Parse the message JSON from the data attribute to access properties
      const message = JSON.parse(this.dataset.message); // Parse the JSON string
      const eventId = message.id;

      // Function to format date
      function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getUTCDate()).padStart(2, '0');
        const month = String(date.getUTCMonth() + 1).padStart(2, '0');
        const year = date.getUTCFullYear();

        let hours = date.getUTCHours();
        const minutes = String(date.getUTCMinutes()).padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12 || 12;

        return `${day}/${month}/${year} ${String(hours).padStart(2, '0')}:${minutes} ${ampm}`;
      }

      // Function to fetch and populate attendee data in the modal
      const populateAttendees = async () => {
        try {
          console.log("EventsAPI with eventId::", eventId);     
          const event = await fetchFromApi(apiUrlHelper.EventsAPI + "/" + eventId, "GET");
          const attendees = event.Users.filter((data) => data.EventAttendees.typeOfAttendee === 'attendee');

          document.getElementById("attendeeModalLabel").textContent = `Attendees for ${event.eventName || "Event"}`;

          const tbody = document.querySelector("#attendeeTable tbody");
          tbody.innerHTML = "";

          if (Array.isArray(attendees)) {
            attendees.forEach((attendee, index) => {
              const row = document.createElement("tr");
              const createdAt = formatDate(attendee.createdAt);
              const updatedAt = formatDate(attendee.updatedAt);

              row.innerHTML = `
                <td>${index + 1}</td>
                <td>${attendee.name}</td>
                <td>${attendee.email}</td>
                <td>${attendee.contactNumber || "N/A"}</td>
                <td>${attendee.status || "N/A"}</td>
                <td>${createdAt}</td>
                <td>${updatedAt}</td>
              `;

              tbody.appendChild(row);
            });
          } else {
            console.error("Expected an array but got:", attendees);
            tbody.innerHTML = `<tr><td colspan="7">No attendees data available.</td></tr>`;
          }
        } catch (error) {
          console.error("Error fetching attendees:", error);
          const tbody = document.querySelector("#attendeeTable tbody");
          tbody.innerHTML = `<tr><td colspan="7">Failed to load attendees data.</td></tr>`;
        }
      };

      // Set up the event listener for the "View" button
      const button = this.querySelector("button");
      button.addEventListener("click", () => {
        console.log("Button clicked with eventId:", eventId);     
        populateAttendees();
      });
    }
  }

  customElements.define("attendee-func", Attendeefunction);
</script>

