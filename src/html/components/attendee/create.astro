---
const { message = "" } = Astro.props;
---

<create-func data-message={message}>
  <button
    type="button"
    class="btn btn-success me-4"
    data-bs-toggle="modal"
    data-bs-target="#createModal">Invite Attendee
    </button>

  <div
    class="modal fade"
    id="createModal"
    tabindex="-1"
    aria-labelledby="createModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg" style="max-width: 500px;">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="createModalLabel">Invite Attendee</h1>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="createform">
            <div class="card-body">
              <div class="mb-3">
                <label for="attendeeEmail1" class="form-label"
                  >Email address</label
                >
                <input
                  type="email"
                  class="form-control"
                  id="attendeeEmail1"
                  aria-describedby="emailHelp"
                  required
                />
              </div>
            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-primary"
              >Invite</button>
            </div>
          </form>
          <script is:inline>
            (() => {
              "use strict";

              const form = document.getElementById("createform");
              const alertBox = document.getElementById("alert");

              form.addEventListener("submit", async (event) => {
                event.preventDefault(); // Prevent the default form submission

                const formData = {
                  id: "9092a826-e298-432b-b7e1-b9026d070d7e",
                  Users: {email: document.getElementById("attendeeEmail").value},
                };

                if (!form.checkValidity()) {
                  event.stopPropagation();
                } else {
                  try {
                    console.log(formData);
                    const data = await fetchFromApi(
                      apiUrlHelper.EventsAPI,
                      "POST",
                      formData
                    );
                    console.log(data); // Log the response data

                    if (data != null) {
                    const toastElement =
                      document.getElementById("toastSuccess");
                    const toastBody = document.getElementById("toastBody");
                    const toastTime = document.getElementById("toastTime"); // Get the small element

                    // Get the current timestamp
                    const currentTimestamp = new Date();

                    // Format the date and time
                    const options = {
                      year: "numeric",
                      month: "short", // 'short' for abbreviated month names
                      day: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                      hour12: false, // Change to false for 24-hour format
                    };
                    const formattedDateTime = currentTimestamp.toLocaleString(
                      [],
                      options
                    );
                    toastTime.textContent = formattedDateTime;

                    // Change the body content dynamically
                    toastBody.textContent =
                      "Edited " + " successfully."; // Set your dynamic message

                    const toast = new bootstrap.Toast(toastElement); // Create a new toast instance

                    // Add an event listener for when the toast is hidden
                    toastElement.addEventListener(
                      "hidden.bs.toast",
                      function () {
                        window.location.reload(); // Reload the window
                      }
                    );

                    toast.show(); // Show the toast
                  }

                    // Show the alert
                    alertBox.classList.remove("d-none");

                    // Optionally hide the alert after a few seconds
                    setTimeout(() => {
                      alertBox.classList.add("d-none");
                      window.location.reload();
                    }, 3000);
                  } catch (error) {
                    console.error("Error invite attendee:", error);
                  }
                }

                form.classList.add("was-validated");
              });
            })();
          </script>
        </div>
      </div>
    </div>
  </div>
</create-func>

<script>
  class Createfunction extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const message = this.dataset.message;
      const button = this.querySelector("button");
    }
  }

  customElements.define("create-func", Createfunction);
</script>
