---
const { message = "" } = Astro.props;
---

<delete-func data-message={message}>

    <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#confirmationModal">Delete</button>

    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Remove Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p class="confirm-name"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script is:inline>
        (() => {
            "use strict";
    
            // Function to handle the delete action
            const handleDelete = async (eventData) => {
                try {
                    const response = await fetch(`${apiUrlHelper.EventsAPI}/${eventData.id}`, {
                        method: "DELETE",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
    
                    if (response.ok) {
                        console.log(`Event with ID ${eventData.id} deleted successfully.`);
    
                        // Hide the modal immediately
                        const confirmationModal = document.getElementById("confirmationModal");
                        const modalInstance = bootstrap.Modal.getInstance(confirmationModal);
                        modalInstance.hide();
    
                        // Display the toast on the main page
                        const toastElement = document.getElementById("toast");
                        toastElement.className = `toast toast-secondary`;
    
                        const toastTitle = document.getElementById("toastTitle");
                        const toastBody = document.getElementById("toastBody");
                        const toastTime = document.getElementById("toastTime");
    
                        // Retrieve event name directly from data attribute
                        const eventName = confirmationModal.dataset.eventName;
    
                        // Set up toast content with event name
                        const currentTimestamp = new Date();
                        const options = {
                            year: "numeric",
                            month: "short",
                            day: "numeric",
                            hour: "2-digit",
                            minute: "2-digit",
                            hour12: true,
                        };
    
                        // Display event name in the toast
                        toastTitle.textContent = `${eventName} deleted`;
                        toastTime.textContent = currentTimestamp.toLocaleString([], options);
                        toastBody.textContent = `${eventName} has been successfully deleted.`;
    
                        // Show the toast notification
                        const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
                        toastElement.addEventListener("hidden.bs.toast", function () {
                            window.location.reload();
                        });
                        toast.show();
                    } else {
                        const errorData = await response.json();
                        console.error("Failed to delete event:", errorData.message);
                    }
                } catch (error) {
                    console.error("Error deleting event:", error);
                    alert("An error occurred while trying to delete the event.");
                }
            };
    
            // Attach event listener to the confirm delete button
            document.addEventListener("click", (event) => {
                if (event.target && event.target.id === "confirmDelete") {
                    const confirmationModal = document.getElementById("confirmationModal");
                    const eventId = confirmationModal.dataset.eventId;
                    const eventName = confirmationModal.dataset.eventName; // Retrieve only the event name
                    handleDelete({ id: eventId, eventName });
                }
            });
        })();
    </script>    
</delete-func>

<script>
    class Deletefunction extends HTMLElement {
        connectedCallback() {
            // Parse the message data attribute
            const message = JSON.parse(this.dataset.message);
            const deleteButton = this.querySelector('button');

            // Set up the modal with the full message and store eventName in a custom attribute
            deleteButton.addEventListener('click', () => {
                const confirmationModal = document.getElementById('confirmationModal');
                confirmationModal.dataset.eventId = message.id; // Store the event ID for deletion
                confirmationModal.dataset.eventName = message.eventName; // Store only the event name

                const msgName = confirmationModal.querySelector('.confirm-name');
                msgName.textContent = `Are you sure you want to remove ${message.eventName}?`; // Display full message
            });
        }
    }

    customElements.define('delete-func', Deletefunction);
</script>