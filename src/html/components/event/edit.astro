---
const { message = "" } = Astro.props;
---

<edit-func data-message={message}>
  <button
    type="button"
    data-id={JSON.parse(message).id}
    class="btn btn-outline-primary"
    data-bs-toggle="modal"
    data-bs-target="#editModal">Edit</button
  >

  <div
    class="modal fade"
    id="editModal"
    tabindex="-1"
    aria-labelledby="editModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="editModalLabel">Edit Event</h1>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form class="needs-validation" novalidate id={JSON.parse(message).id}>
            <input type="hidden" id="editId" value={JSON.parse(message).id} />
            <div class="card-body">
              <div class="row g-3">
                <div class="col-md-6">
                  <div class="input-group has-validation">
                    <span class="input-group-text" id="inputGroupPrepend"
                      ><b>Name</b></span
                    >
                    <input
                      type="text"
                      class="form-control msg-name"
                      name="editname"
                      id="validationName"
                      aria-describedby="inputGroupPrepend"
                      required
                    />
                    <div class="invalid-feedback">
                      Please input a valid Name.
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="input-group has-validation">
                    <span class="input-group-text" id="inputGroupPrepend"
                      ><b>Email</b></span>
                    <input
                      type="text"
                      class="form-control msg-email"
                      name="editemail"
                      id="validationEmail"
                      aria-describedby="inputGroupPrepend"
                      required
                    />
                    <div class="invalid-feedback">
                      Please input a valid Email.
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="input-group has-validation">
                    <span class="input-group-text" id="inputGroupPrepend"
                      ><b>Contact</b></span
                    >
                    <input
                      type="text"
                      class="form-control msg-contact"
                      name="editcontact"
                      id="validationContact"
                      aria-describedby="inputGroupPrepend"
                      required
                    />
                    <div class="invalid-feedback">
                      Please input a valid contact number.
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal">Close</button
              >
              <button
                id="editSubmit"
                type="submit"
                class="btn btn-primary"
                data-bs-dismiss="modal">Save</button
              >
            </div>
          </form>
          <script is:inline>
            (() => {
              "use strict";

              const alertBox = document.getElementById("alert");

              // Function to handle form submission
              const handleFormSubmit = async (event) => {
                event.preventDefault(); // Prevent the default form submission
                const form = event.target; // The form that triggered the event

                // Flag to prevent multiple submissions
                if (form.isSubmitting) return;
                form.isSubmitting = true; // Set flag to indicate submission in progress

                // Retrieve values directly from the form element
                const editId = form.id; // Assuming form id is the editId
                const formData = {
                  id: editId,
                  name: form.querySelector('input[name="editname"]').value,
                  email: form.querySelector('input[name="editemail"]').value,
                  contactNumber: form.querySelector('input[name="editcontact"]')
                    .value,
                };

                if (!form.checkValidity()) {
                  form.isSubmitting = false; // Reset flag if form is invalid
                  event.stopPropagation();
                  return;
                }

                try {
                  const data = await fetchFromApi(
                    apiUrlHelper.UsersAPI + "/" + editId,
                    "PUT",
                    formData
                  );
                  console.log(data); // Log the response data

                  if (data != null) {
                    const toastElement =
                      document.getElementById("toastSuccess");
                    const toastBody = document.getElementById("toastBody");
                    const toastTime = document.getElementById("toastTime"); // Get the small element

                    // Get the current timestamp
                    const currentTimestamp = new Date();

                    // Format the date and time
                    const options = {
                      year: "numeric",
                      month: "short", // 'short' for abbreviated month names
                      day: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                      hour12: true, // Change to false for 24-hour format
                    };
                    const formattedDateTime = currentTimestamp.toLocaleString(
                      [],
                      options
                    );
                    toastTime.textContent = formattedDateTime; // Set the formatted date and time

                    // Change the body content dynamically
                    toastBody.textContent =
                      "Edited " + editId + " successfully."; // Set your dynamic message

                    const toast = new bootstrap.Toast(toastElement); // Create a new toast instance

                    // Add an event listener for when the toast is hidden
                    toastElement.addEventListener(
                      "hidden.bs.toast",
                      function () {
                        window.location.reload(); // Reload the window
                      }
                    );

                    toast.show(); // Show the toast
                  }
                } catch (error) {
                  console.error("Error submitting form:", error);
                } finally {
                  form.isSubmitting = false; // Reset flag after completion
                }

                form.classList.add("was-validated");
              };

              // Attach event listener to a parent element or the document
              document.addEventListener("submit", (event) => {
                if (event.target.matches("form")) {
                  // Check if the target is a form
                  handleFormSubmit(event);
                }
              });
            })();
          </script>

          <!--end::JavaScript-->
        </div>
      </div>
    </div>
  </div>
  <!--end::Edit Modal-->
</edit-func>

<script>
  class Editfunction extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const message = JSON.parse(this.dataset.message);
      const button = this.querySelector("button");
      button.addEventListener("click", () => {
        const editModal = document.getElementById("editModal");
        const modalTitle = editModal.querySelector(".modal-title");
        const msgName = editModal.querySelector(".msg-name");
        const msgEmail = editModal.querySelector(".msg-email");
        const msgContact = editModal.querySelector(".msg-contact");

        modalTitle.textContent = `Editing Organizer: ${message.name}`;
        msgName.value = `${message.name}`;
        msgEmail.value = `${message.email}`;
        msgContact.value = `${message.contactNumber}`;

        // const radioActive = editModal.querySelector("#gridRadios1");
        // const radioInactive = editModal.querySelector("#gridRadios2");
        // if (message.status === "Active") {
        //   radioActive.checked = true;
        // } else {
        //   radioInactive.checked = true;
        // }
      });
    }
  }

  customElements.define("edit-func", Editfunction);
</script>
