---
const { message = "" } = Astro.props;
const path = "../../../dist";
const mainPage = "event";
const page = "event-attendee";
---

<get-func data-message={message}>
  <div class="app-content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12">
          <div class="card mb-4">
            <div class="card-header align-items-center">
              <h3 class="card-title" id="pageTitle">Manage Events</h3>
            </div>
            <div class="card-body p-0">
              <table class="table table-striped" id="dataTable">
                <thead>
                  <tr>
                    <th class="col-1" style="width: 30px;">#</th>
                    <th class="col-1">Event Name</th>
                    <th class="col-2">Event Description</th>
                    <th class="col-1">Event Date</th>
                    <th class="col-1">Start Time</th>
                    <th class="col-1">End Time</th>
                    <th class="col-1">Location</th>
                    <th class="col-1">Type</th>
                    <th class="col-1">Status</th>
                    <th class="col-1" style="width: 120px;">Invited At</th>
                    <th class="col-1" style="width: 120px;">Attended At</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div
        id="toastSuccess"
        class="toast toast-success"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        style="position: absolute; bottom: 20px; right: 20px;"
      >
        <div class="toast-header">
          <div class="spinner-border spinner-border-sm text-light me-2"></div>
          <strong class="me-auto">Update Event</strong>
          <small id="toastTime">value</small>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody"></div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      // Get userId from localStorage
      const userId = localStorage.getItem('id') || '';
      console.log("userId: ", userId);

      // Fetch updated events data for the user
      const events = await fetchFromApi(apiUrlHelper.EventsAPI + "/user/" + userId, "GET");

      // Sort events by eventDate (desc) and eventName (asc)
      events.sort((a, b) => {
        const dateA = new Date(a.eventDate);
        const dateB = new Date(b.eventDate);
        if (dateA > dateB) return -1;
        if (dateA < dateB) return 1;
        return a.eventName.localeCompare(b.eventName);
      });

      function formatDate(dateString) {
        // Check if dateString is null or empty
        if (!dateString) {
            return "";
        }

        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();

        let hours = date.getHours();
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12 || 12;

        return `${day}/${month}/${year} ${String(hours).padStart(2, '0')}:${minutes} ${ampm}`;
      }

      function getDateOnly(datetimeString) {
          const date = new Date(datetimeString);
          const day = String(date.getDate()).padStart(2, '0');
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const year = date.getFullYear();
          return `${year}-${month}-${day}`;
      };

      function getTimeOnly(datetimeString) {
          const date = new Date(datetimeString);
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });
      }

      // Populate the table dynamically
      const eventTableBody = document.getElementById("dataTable").querySelector("tbody");
      eventTableBody.innerHTML = ''; // Clear existing rows
      events.forEach((data, index) => {
        const row = document.createElement("tr");
        row.className = "align-middle";
        row.innerHTML = `
          <td>${index + 1}</td>
          <td>${data.eventName}</td>
          <td>${data.eventDescription}</td>
          <td>${getDateOnly(data.eventDate)}</td>
          <td>${getTimeOnly(data.eventTimeStart)}</td>
          <td>${getTimeOnly(data.eventTimeEnd)}</td>
          <td>${data.eventLocation}</td>
          <td>${data.eventType}</td>
          <td>${data.EventAttendees?.status || ''}</td>
          <td>${data.EventAttendees?.dateTimeInvited ? formatDate(data.EventAttendees.dateTimeInvited): ''}</td>
          <td>${data.EventAttendees?.dateTimeAttended ? formatDate(data.EventAttendees.dateTimeAttended) : ''}</td>
        `;
        eventTableBody.appendChild(row);
      });
    });
  </script>
</get-func>
