---
import { apiUrlHelper, fetchFromApi } from "../../utils/api.config";
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";

const title = "EventSpark | Dashboard";
const path = "../../dist";
const mainPage = "dashboard";
const page = "index";
---

<!doctype html>
<html lang="en">
  <head>
    <Head title={title} path={path} />
  </head>
  <body class="layout-fixed sidebar-expand-lg bg-body-tertiary">
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <main class="app-main">
        <div class="app-content-header">
          <div class="container-fluid">
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Dashboard</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="#">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">Dashboard</li>
                </ol>
              </div>
            </div>
          </div>
        </div>

        <div class="app-content">
          <div class="container-fluid">
            <div class="row">
              <div class="col-lg-3 col-6">
                <div class="small-box text-bg-primary">
                  <div class="inner">
                    <h3 id="organiserEventCount">0</h3>
                    <p>Event Owned</p>
                  </div>
                  <a href="/event-organiser.html" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                    More info <i class="bi bi-link-45deg"></i>
                  </a>
                </div>
              </div>
              <div class="col-lg-3 col-6">
                <div class="small-box text-bg-warning">
                  <div class="inner">
                    <h3 id="upcomingAttendeeEventCount">0</h3>
                    <p>Pending Attend</p>
                  </div>
                  <a href="/event-attendee.html" class="small-box-footer link-dark link-underline-opacity-0 link-underline-opacity-50-hover">
                    More info <i class="bi bi-link-45deg"></i>
                  </a>
                </div>
              </div>
            </div>

            <!-- Conditional Event List Display -->
            <div id="eventListContainer" class="row" style="display: none;">
              <div class="col-lg-6">
                <div class="card mb-4">
                  <div class="card-header">
                    <h3 class="card-title">Event List for Organiser</h3>
                  </div>
                  <div class="card-body p-0">
                    <table class="table table-striped">
                      <thead>
                        <tr>
                          <th style="width: 10px">#</th>
                          <th>Event Name</th>
                          <th>Registration Rate</th>
                          <th style="width: 40px"></th>
                          <th>Attendance Rate</th>
                          <th style="width: 40px"></th>
                        </tr>
                      </thead>
                      <tbody id="eventListBody">
                        <!-- Event rows will be populated here -->
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>

          </div>
        </div>
      </main>
      <Footer />
    </div>
    <Scripts path={path} />
    
    <!-- Client-side script to dynamically load content -->
    <script client:load>
      document.addEventListener("DOMContentLoaded", async () => {
        const userId = localStorage.getItem('id') || '';
        
        let organiserEventCount = 0;
        let upcomingAttendeeEventCount = 0;

        const organiserEvents = await fetchFromApi(apiUrlHelper.EventsAPI, "GET");
        const attendeeEvents = await fetchFromApi(apiUrlHelper.EventsAPI + "/user/" + userId, "GET");

        // Filter organiser events by organiserId and get the count
        const filteredOrganiserEvents = organiserEvents.filter(
          (data) => data.organiserId === userId
        );
        organiserEventCount = filteredOrganiserEvents.length;

        // Update organiser event count in the DOM
        document.getElementById("organiserEventCount").innerText = organiserEventCount;

        // Get today's date without time (for comparison purposes)
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        // Filter attendeeEvents to only include events with a date later than today
        upcomingAttendeeEventCount = attendeeEvents.filter((event) => {
          const eventDate = new Date(event.eventDate);
          return eventDate > today;
        }).length;

        // Update attendee event count in the DOM
        document.getElementById("upcomingAttendeeEventCount").innerText = upcomingAttendeeEventCount;

        // Display the event list only if organiserEventCount > 0
        if (organiserEventCount > 0) {
          document.getElementById("eventListContainer").style.display = "block";

          // Fetch additional details for each event by ID
          const fetchEventDetails = async (events) => {
            return await Promise.all(events.map(async (event) => {
              try {
                const eventUsers = await fetchFromApi(apiUrlHelper.EventAttendeesAPI + "/" + event.id, "GET");

                const attendees = Array.isArray(eventUsers)
                  ? eventUsers.filter((data) => data.typeOfAttendee === 'attendee')
                  : [];

                const totalParticipants = attendees.length;
                const registeredCount = attendees.filter(
                  (p) => p.status?.toUpperCase() === "REGISTERED" || p.status?.toUpperCase() === "ATTENDED"
                ).length;
                const attendedCount = attendees.filter((p) => p.status?.toUpperCase() === "ATTENDED").length;

                return {
                  ...event,
                  registeredProgress: (registeredCount / totalParticipants) * 100 || 0,
                  attendedProgress: (attendedCount / totalParticipants) * 100 || 0
                };
              } catch (error) {
                console.error(`Error fetching details for event ID ${event.id}:`, error);
                return { ...event, registeredProgress: 0, attendedProgress: 0 };
              }
            }));
          };

          const organiserEventsWithDetails = await fetchEventDetails(filteredOrganiserEvents);

          // Populate event list table with data
          const eventListBody = document.getElementById("eventListBody");
          organiserEventsWithDetails.forEach((event, index) => {
            const row = document.createElement("tr");
            row.classList.add("align-middle");

            row.innerHTML = `
              <td>${index + 1}</td>
              <td>${event.eventName}</td>
              <td>
                <div class="progress progress-xs">
                  <div class="progress-bar ${getProgressBarClass(event.registeredProgress)}" style="width: ${event.registeredProgress}%"></div>
                </div>
              </td>
              <td>
                <span class="badge ${getBadgeClass(event.registeredProgress)}">${Math.round(event.registeredProgress)}%</span>
              </td>
              <td>
                <div class="progress progress-xs">
                  <div class="progress-bar ${getProgressBarClass(event.attendedProgress)}" style="width: ${event.attendedProgress}%"></div>
                </div>
              </td>
              <td>
                <span class="badge ${getBadgeClass(event.attendedProgress)}">${Math.round(event.attendedProgress)}%</span>
              </td>
            `;
            eventListBody.appendChild(row);
          });
        }

        // Utility functions for progress bar class
        function getProgressBarClass(progress) {
          if (progress < 30) return "bg-danger";
          if (progress >= 30 && progress < 60) return "bg-warning";
          if (progress >= 60 && progress < 85) return "bg-primary";
          return "bg-success";
        }

        function getBadgeClass(progress) {
          if (progress < 30) return "text-bg-danger";
          if (progress >= 30 && progress < 60) return "text-bg-warning";
          if (progress >= 60 && progress < 85) return "text-bg-primary";
          return "text-bg-success";
        }
      })();
    </script>
  </body>
</html>
